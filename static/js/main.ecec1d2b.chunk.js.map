{"version":3,"sources":["stop_it.jpg","logo.svg","slave_nonsan.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","date","times","answer","Math","floor","allTime","App","countDownDate","Date","getTime","countDownNonsanDate","countDownAllDate","now","useState","time","nonsanTime","setTimes","useEffect","test","setInterval","clearInterval","console","log","className","style","position","width","paddingTop","zIndex","color","fontSize","textAlign","lineHeight","src","stop","alt","height","left","backgroundColor","opacity","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,qC,wECA3CD,EAAOC,QAAU,IAA0B,kC,kCCA3CD,EAAOC,QAAU,IAA0B,0C,2HCkF3C,IAAIC,EAAO,SAACC,GACV,IAAIC,EAASC,KAAKC,MAAMH,EAAMI,QAAN,OAAwC,UAMhE,OALAH,GAAUC,KAAKC,MAAOH,EAAMI,QAAN,MAAD,MAA+D,gBACpFH,GAAUC,KAAKC,MAAOH,EAAMI,QAAN,KAAD,KAAoD,UACzEH,GAAUC,KAAKC,MAAOH,EAAMI,QAAN,IAAiC,KAAQ,UAQlDC,EAxFf,WACE,IAAMC,EAAgB,IAAIC,KAAK,2BAA2BC,UACpDC,EAAsB,IAAIF,KAAK,8BAA8BC,UAC7DE,EAAmB,IAAIH,KAAK,+BAA+BC,UAG3DG,EAAM,IAAIJ,KANH,EAUaK,mBAAS,CACjCC,KAAMP,EAAcK,EAAIH,UACxBJ,QAASM,EAAmBC,EAAIH,UAChCM,WAAYL,EAAsBE,EAAIH,YAb3B,mBAUNR,EAVM,KAUCe,EAVD,KAqCb,OArBAC,qBAAU,WACR,IAAIC,EAAOC,aAAY,WACrB,IAAIP,EAAMJ,KAAKI,MAIfI,EAAS,CACPF,KAJaP,EAAgBK,EAK7BP,QAJgBM,EAAmBC,EAKnCG,WAJmBL,EAAsBE,MAO3C,KAEH,OAAO,WACJQ,cAAcF,MAEf,IAEHG,QAAQC,IAAIrB,GAGV,yBAAKsB,UAAU,OAoBb,yBAAKC,MAAO,CAACC,SAAU,aACrB,yBAAKD,MAAO,CAACC,SAAS,WAAWC,MAAM,QAAQC,WAAW,SACvD,0BAAMH,MAAO,CAACI,OAAO,IAAIC,MAAM,QAAQC,SAAS,SAASL,SAAS,WAAWM,UAAU,SAASL,MAAM,OAAOM,WAAW,OAAxH,gCACA,0BAAMR,MAAO,CAACI,OAAO,IAAIC,MAAM,QAAQC,SAAS,SAASL,SAAS,WAAWM,UAAU,SAASL,MAAM,OAAOM,WAAW,SAAUhC,EAAKC,KAE1I,yBAAKgC,IAAKC,IAAMC,IAAK,MAAOX,MAAO,CAACE,MAAO,QAAQU,OAAO,QAAQX,SAAS,WAAWY,KAAK,KAC3F,yBAAKb,MAAO,CAACE,MAAM,QAAQU,OAAO,QAAQE,gBAAgB,QAAQb,SAAS,WAAWc,QAAQ,YC1DlFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ecec1d2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stop_it.b3ac0f04.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/slave_nonsan.2545546f.jpg\";","import React,{useState,useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport cat from './slave_nonsan.jpg'\nimport stop from './stop_it.jpg'\n\nfunction App() {\n  const countDownDate = new Date(\"March 19, 2020 11:00:00\").getTime();\n  const countDownNonsanDate = new Date(\"February 18, 2020 14:00:00\").getTime();\n  const countDownAllDate = new Date(\" December 18, 2021 00:00:00\").getTime();\n \n\n  const now = new Date();\n  // const [Time,setTime] = useState(countDownDate-now.getTime())\n  // const [allTime,setAllTime] = useState(countDownAllDate - now.getTime())\n  // const [NonsanTime,setNonsanTime] = useState(countDownNonsanDate - now.getTime())\n  const [times, setTimes] = useState({\n    time: countDownDate-now.getTime(),\n    allTime: countDownAllDate - now.getTime(),\n    nonsanTime: countDownNonsanDate - now.getTime(),\n  });\n  \n  useEffect(() => {\n    let test = setInterval(()=>{\n      let now = Date.now()\n      let distance = countDownDate - now;\n      let alldistance = countDownAllDate - now;\n      let Nonsandistance = countDownNonsanDate - now;\n      setTimes({\n        time: distance,\n        allTime: alldistance,\n        nonsanTime: Nonsandistance,\n      })\n\n    },1000);\n\n   return () => {\n      clearInterval(test)\n   }\n  }, [])\n \n  console.log(times)\n\n  return (\n    <div className=\"App\">\n      {/* <div>\n        <span>{Math.floor(times.nonsanTime / (1000 * 60 * 60 * 24))}일 </span>\n        <span>{Math.floor((times.nonsanTime  % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))} 시간</span>\n        <span>{Math.floor((times.nonsanTime  % (1000 * 60 * 60)) / (1000 * 60))} 분 </span> \n        <span>{Math.floor((times.nonsanTime  % (1000 * 60)) / 1000)} 초</span>  \n      </div>\n      \n      <div>\n        <span>{Math.floor(times.time / (1000 * 60 * 60 * 24))}일 </span>\n        <span>{Math.floor((times.time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))} 시간</span>\n        <span>{Math.floor((times.time % (1000 * 60 * 60)) / (1000 * 60))} 분 </span> \n        <span>{Math.floor((times.time % (1000 * 60)) / 1000)} 초</span>  \n      </div>\n      <div>\n        <span>{Math.floor(times.allTime / (1000 * 60 * 60 * 24))}일 </span>\n        <span>{Math.floor((times.allTime  % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))} 시간</span>\n        <span>{Math.floor((times.allTime  % (1000 * 60 * 60)) / (1000 * 60))} 분 </span> \n        <span>{Math.floor((times.allTime  % (1000 * 60)) / 1000)} 초</span>  \n      </div> */}\n      <div style={{position: \"relative\"}}>\n        <div style={{position:\"absolute\",width:\"100vw\",paddingTop:\"40vh\"}}>\n           <span style={{zIndex:100,color:\"white\",fontSize:\"2.3rem\",position:\"absolute\",textAlign:\"center\",width:\"100%\",lineHeight:\"0%\"}}>전역까\b지\b</span>\n           <span style={{zIndex:100,color:\"white\",fontSize:\"9.5rem\",position:\"absolute\",textAlign:\"center\",width:\"100%\",lineHeight:\"120%\"}}>{date(times)}</span>\n        </div>\n        <img src={stop} alt={\"123\"} style={{width: \"100vw\",height:\"100vh\",position:\"absolute\",left:0,}}/>\n        <div style={{width:\"100vw\",height:\"100vh\",backgroundColor:\"black\",position:\"absolute\",opacity:\"50%\",}}/>\n        \n       \n      </div>\n   \n    \n\n\n    </div>\n  );\n}\n\nlet date = (times) => {\n  let answer = Math.floor(times.allTime / (1000 * 60 * 60 * 24)) +\"일 \"\n  answer += Math.floor((times.allTime  % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)) + \"시간 \"\n  answer += Math.floor((times.allTime  % (1000 * 60 * 60)) / (1000 * 60))+ \"분 \"\n  answer += Math.floor((times.allTime   % (1000 * 60)) / 1000) + \"초\"\n  \n\n  return answer\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}